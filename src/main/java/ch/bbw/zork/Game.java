package ch.bbw.zork;import java.util.Locale;/** * Class Game - the main class of the "Zork" game. * * Author:  Michael Kolling, 1.1, March 2000 * refactoring: Rinaldo Lanza, September 2020 */public class Game {		private Parser parser;	private Room currentRoom;	private Room spawn, villageSquare, tavern, courtYard, tortureChamber, throneRoom;	public Game() {				parser = new Parser(System.in);		spawn = new Room("Spawn","Outside Of The Castle, try to Find a way in");		villageSquare = new Room("Village Square","the Village Square, very Busy by Day while completely empty By night. is there any Evil lurking in the shadows?");		tavern = new Room("Tavern","the Drunken Jew Tavern (the Knights pub)");		courtYard = new Room("court Yard","the Court Yard. Thousands of knights have trained here, But are you worthy to stand foot on this land?");		tortureChamber = new Room("Torture Chamber","the Torture Chamber. This is where the tormenting Jaime will torture you with his Cloud Computing Infrastructure");		throneRoom = new Room("Throne Room","The most Sacred Room of all and where The evil King Lutschmann the 3rd resides");		spawn.setExits(null, villageSquare, null, tavern);		villageSquare.setExits(courtYard, null, null, tavern);		tavern.setExits(null, courtYard, null, null);		courtYard.setExits(null, tortureChamber, null, null);		tortureChamber.setExits(spawn, spawn, spawn, throneRoom);		throneRoom.setExits(null, null, null, null);		currentRoom = spawn;	}	/**	 *  Main play routine.  Loops until end of play.	 */	public void play() {		printWelcome();		boolean finished = false;		while (!finished) {			Command command = parser.getCommand();			finished = processCommand(command);		}		System.out.println("Thank you for playing.  Good bye.");	}	private void printWelcome() {		System.out.println();		System.out.println("Welcome to King Killer!");		System.out.println("King Killer is a simple Murder game.");		System.out.println("Type 'help' if you need help.");		System.out.println();		System.out.println(currentRoom.longDescription());	}	private boolean processCommand(Command command) {		if (command.isUnknown()) {			System.out.println("I don't know what you mean...");			return false;		}		String commandWord = command.getCommandWord();		if (commandWord.equals("help")) {			printHelp();		} else if (commandWord.equals("go")) {			goRoom(command);					} else if (commandWord.equals("quit")) {			if (command.hasSecondWord()) {				System.out.println("Quit what?");			} else {				return true;			}		}		return false;	}	private void printHelp() {		System.out.println("You are lost. You are alone. You wander");		System.out.println("around the Parameter, The Royal Castle.");		System.out.println();		System.out.println("Your command words are:");		System.out.println(parser.showCommands());	}	private void goRoom(Command command) {		if (!command.hasSecondWord()) {			System.out.println("Go where?");		} else {						String direction = command.getSecondWord();				// Try to leave current room.			Room nextRoom = currentRoom.nextRoom(direction);				if (nextRoom == null)				System.out.println("There is no door!");			else {				currentRoom = nextRoom;				if(currentRoom.getRoomName().toLowerCase(Locale.ROOT).equals("throne room")){					startEndGame();				}else{					System.out.println(currentRoom.longDescription());				}			}		}	}	private void startEndGame(){	}}