package ch.bbw.zork;import java.io.BufferedReader;import java.io.Console;import java.io.InputStreamReader;import java.sql.SQLOutput;import java.util.Locale;/** * Class Game - the main class of the "Zork" game. * <p> * Author:  Michael Kolling, 1.1, March 2000 * refactoring: Rinaldo Lanza, September 2020 */public class Game {    private Parser parser;    private Room currentRoom;    private Room spawn, villageSquare, tavern, courtYard, tortureChamber, throneRoom;    private CommandWords validWords = new CommandWords();    private boolean finished = false;    public Game() {        parser = new Parser(System.in);        spawn = new Room("Spawn", "Outside Of The Castle, try to Find a way in");        villageSquare = new Room("Village Square", "the Village Square, very Busy by Day while completely empty By night. is there any Evil lurking in the shadows?");        tavern = new Room("Tavern", "the Drunken Jew Tavern (the Knights pub)");        courtYard = new Room("court Yard", "the Court Yard. Thousands of knights have trained here, But are you worthy to stand foot on this land?");        tortureChamber = new Room("Torture Chamber", "the Torture Chamber. This is where the tormenting Jaime will torture you with his Cloud Computing Infrastructure");        throneRoom = new Room("Throne Room", "The most Sacred Room of all and where The evil King Rutschmann the 3rd resides");        spawn.setExits(null, villageSquare, null, tavern, spawn);        villageSquare.setExits(courtYard, null, null, tavern, spawn);        tavern.setExits(null, courtYard, null, null, null);        courtYard.setExits(null, tortureChamber, null, null, null);        tortureChamber.setExits(spawn, spawn, spawn, throneRoom, courtYard);        throneRoom.setExits(null, null, null, null, tortureChamber);        currentRoom = spawn;    }    /**     * Main play routine.  Loops until end of play.     */    public void play() {        printWelcome();        while (!finished) {            Command command = parser.getCommand();            finished = processCommand(command);        }        System.out.println("Thank you for playing. Good bye.");    }    private void printWelcome() {        System.out.println();        System.out.println("Welcome to King Killer!");        System.out.println("King Killer is a simple adventure game.");        System.out.println("Type 'help' if you need help.");        System.out.println();        System.out.println(currentRoom.longDescription());    }    private boolean processCommand(Command command) {        if (command.isUnknown()) {            System.out.println("I don't know what you mean...");            return false;        }        String commandWord = command.getCommandWord();        if (commandWord.equals("help")) {            printHelp();        } else if (commandWord.equals("go")) {            goRoom(command);        } else if (commandWord.equals("quit")) {            if (command.hasSecondWord()) {                System.out.println("Quit what?");            } else {                return true;            }        }        return false;    }    private void printHelp() {        System.out.println("You are lost. You are alone. You wander");        System.out.println("around the Parameter, The Royal Castle.");        System.out.println();        System.out.println("Your command words are:");        System.out.println(parser.showCommands());    }    private void goRoom(Command command) {        if (!command.hasSecondWord()) {            System.out.println("Go where?");        } else if (!validWords.isSecondCommandValid(command.getSecondWord())) {            System.out.println("Please enter a valid direction");        } else {            if (command.getSecondWord().toLowerCase(Locale.ROOT).equals("back")) {                currentRoom = currentRoom.goBackRoom();                System.out.println(currentRoom.longDescription());            } else {                String direction = command.getSecondWord();                Room nextRoom = currentRoom.nextRoom(direction, currentRoom);                if (nextRoom == null)                    System.out.println("There is no door!");                else {                    currentRoom = nextRoom;                    System.out.println(currentRoom.longDescription());                    if (currentRoom.getRoomName().toLowerCase(Locale.ROOT).equals("throne room")) {                        boolean result = startEndGame();                        if (result) {                            System.out.println("Congratulations! You Have killed the evil king");                            finished = true;                            System.exit(1);                        } else {                            System.out.println("Well shit. You failed. Great Job dumbass!");                            System.out.println("The game will automatically be restarted");                            this.play();                        }            if (nextRoom == null)                System.out.println("There is no door!");            else {                currentRoom = nextRoom;                System.out.println(currentRoom.longDescription());                if (currentRoom.getRoomName().toLowerCase(Locale.ROOT).equals("throne room")) {                    boolean result = startEndGame();                    if (result) {                        System.out.println("Congratulations! You Have killed that evil king");                        finished = true;                        System.exit(1);                    } else {                        System.out.println("Well shit. You failed. Great Job dumbass!");                        System.out.println("The game will automatically be restarted");                        this.play();                    }                }            }        }    }    private boolean startEndGame() {        System.out.println("Now you must Answer this question to defeat the vicious Lutschmann the 3rd");        System.out.println("Whats the Name of the Java Component which cleans up your Code in the Backround?");        System.out.println("a: TrashGatherer" + "\n" + "b: CodeCleaner" + "\n" + "c: GarbageCollector" + "\n" + "d: GärbigeKolläktor");		System.out.print("> ");		BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));        try {            String answer = reader.readLine();            if (answer.toLowerCase(Locale.ROOT).equals("d")) {                return true;            } else {                return false;            }        } catch (Exception e) {            System.out.println("An error occurred while reading line: " + e.getMessage());            return false;        }    }}